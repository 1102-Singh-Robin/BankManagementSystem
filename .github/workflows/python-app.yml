name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements"
          pip install coverage pyinstaller

      - name: Run tests with coverage
        run: |
          coverage run -m unittest discover tests
          coverage report > coverage.txt

      - name: Push coverage.txt to repo using PAT
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        shell: pwsh
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote remove origin
          git remote add origin "https://x-access-token:$env:GH_PAT@github.com/${{ github.repository }}"
          git add coverage.txt
          git commit -m "Add coverage report [CI]" || echo "No changes"
          git push origin HEAD:main || echo "Push failed"





      - name: Clean previous build
        run: |
          Remove-Item -Recurse -Force build, dist, __pycache__ -ErrorAction SilentlyContinue
          Remove-Item -Force main.spec -ErrorAction SilentlyContinue
          Write-Output "Cleaned"


      - name: Build .exe using PyInstaller
        run: pyinstaller --onefile main.py

      - name: Upload .exe
        uses: actions/upload-artifact@v4
        with:
          name: main-executable
          path: dist/main.exe

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.txt
